

<template name="getRecords" xmlns="http://ws.apache.org/ns/synapse">
    <!--Required Parameters-->
    <parameter name="tableName" description="Name of the Table you ar going to get data."/>
    <!-- Supported parameters -->
    <parameter name="sysparmQuery" description="An encoded query. The encoded query provides support for order by and filter out records."/>
    <parameter name="sysparmDisplayValue" description="Determines the type of data returned, either the actual values from the database or the display values of the fields"/>
    <parameter name="sysparmFields" description="Comma-separated list of fields to return in the response"/>
    <parameter name="sysparmView" description="UI view for which to render the data. Determines the fields returned in the response"/>
    <parameter name="sysparmLimit" description="Maximum number of records to return"/>
    <parameter name="sysparmOffset" description="Starting record index for which to begin retrieving records"/>
    <parameter name="sysparmExcludeReferenceLink" description="Additional information provided for reference fields."/>
    <parameter name="sysparmSupPaginationHeader" description="Flag that indicates whether to remove the Link header from the response"/>
    <parameter name="keyValuePairs" description="Name-value pairs to use to filter the result set"/>
    <parameter name="sysparmQueryNoDomain" description="Flag that indicates whether to restrict the record search to only the domains for which the logged in user is configured"/>
    <parameter name="sysparmQueryCategory" description="Name of the category to use for queries"/>
    <parameter name="sysparmNoCount" description="TFlag that indicates whether to execute a select count(*) query on the table "/>
    <parameter name="sysparmQuery" description="TFlag that indicates whether to execute a select count(*) query on the table "/>
    <parameter name="apiVersion" description="Optional API version to embed in url"/>
    <sequence>
        <property name="uri.var.tableName" expression="$func:tableName"/>
        <property name="uri.var.sysparmDisplayValue" expression="$func:sysparmDisplayValue"/>
        <property name="uri.var.sysparmFields" expression="$func:sysparmFields"/>
        <property name="uri.var.sysparmView" expression="$func:sysparmView"/>
        <property name="uri.var.sysparmLimit" expression="$func:sysparmLimit"/>
        <property name="uri.var.sysparmOffset" expression="$func:sysparmOffset"/>
        <property name="uri.var.sysparmExcludeReferenceLink" expression="$func:sysparmExcludeReferenceLink"/>
        <property name="uri.var.sysparmSupPaginationHeader" expression="$func:sysparmSupPaginationHeader"/>
        <property name="uri.var.sysparmQueryNoDomain" expression="$func:sysparmQueryNoDomain"/>
        <property name="uri.var.sysparmQueryCategory" expression="$func:sysparmQueryCategory"/>
        <property name="uri.var.sysparmNoCount" expression="$func:sysparmNoCount"/>
        <property name="uri.var.sysparmQuery" expression="$func:sysparmQuery"/>
        <property name="uri.var.keyValuePairs" expression="$func:keyValuePairs"/>
        <property name="uri.var.apiVersion" expression="$func:apiVersion"/>
        <property name="uri.var.apiParameters" value=""/>
        <property name="uri.var.apiParameters" expression="json-eval($.apiParameters)"/>

        <!--Build Key-Value Query Parameter using JSON Payload-->
            <script language="js">
                <![CDATA[
                
                    var keyValue = mc.getProperty('uri.var.keyValuePairs');
                    var payload = mc.getPayloadJSON();
                    var parmString = '';
                    var count=0; 

                    for(var key in eval("("+keyValue+")")){
                    parmString += key+"="+eval("("+keyValue+")")[key]+"&";     
                    }
                    
                    payload['apiParameters'] = parmString;
                    mc.setPayloadJSON(payload);]]>
            </script>
        <!--Build Query Parameters-->
        <filter xpath="(not($ctx:uri.var.sysparmQuery = '' or (not(string($ctx:uri.var.sysparmQuery)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_query=', $ctx:uri.var.sysparmQuery, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmDisplayValue = '' or (not(string($ctx:uri.var.sysparmDisplayValue)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_display_value=', $ctx:uri.var.sysparmDisplayValue, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmFields = '' or (not(string($ctx:uri.var.sysparmFields)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_fields=', $ctx:uri.var.sysparmFields, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmView = '' or (not(string($ctx:uri.var.sysparmView)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_view=', $ctx:uri.var.sysparmView, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmLimit = '' or (not(string($ctx:uri.var.sysparmLimit)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_limit=', $ctx:uri.var.sysparmLimit, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmOffset = '' or (not(string($ctx:uri.var.sysparmOffset)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_offset=', $ctx:uri.var.sysparmOffset, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmExcludeReferenceLink = '' or (not(string($ctx:uri.var.sysparmExcludeReferenceLink)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_exclude_reference_link=', $ctx:uri.var.sysparmExcludeReferenceLink, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmSupPaginationHeader = '' or (not(string($ctx:uri.var.sysparmSupPaginationHeader)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_suppress_pagination_header=', $ctx:uri.var.sysparmSupPaginationHeader, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.sysparmQueryCategory = '' or (not(string($ctx:uri.var.sysparmQueryCategory)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_query_category=', $ctx:uri.var.sysparmQueryCategory, '&amp;')"/>
            </then>
        </filter>
          <filter xpath="(not($ctx:uri.var.sysparmNoCount = '' or (not(string($ctx:uri.var.sysparmNoCount)))))">
            <then>
                <property name="uri.var.apiParameters"
                          expression="fn:concat($ctx:uri.var.apiParameters, 'sysparm_no_count=', $ctx:uri.var.sysparmNoCount, '&amp;')"/>
            </then>
        </filter>
        <filter xpath="(not($ctx:uri.var.apiVersion = '' or (not(string($ctx:uri.var.apiVersion)))))">
            <then>
                <call>
                    <endpoint>
                        <http method="get"
                            uri-template="{uri.var.serviceNowInstanceURL}/api/now/{+uri.var.apiVersion}/table/{+uri.var.tableName}?{+uri.var.apiParameters}"/>
                    </endpoint>
                </call>        
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="get"
                            uri-template="{uri.var.serviceNowInstanceURL}/api/now/table/{+uri.var.tableName}?{+uri.var.apiParameters}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
          
        
    </sequence>
</template>




